name: Build, Push and Deploy - derbyfish-flow

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: farmera/derbyfish-flow
  SYNC_IMAGE: farmera/derbyfish-flow-sync
  REGISTRY: docker.io

jobs:
  build-and-push-api:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MAINNET_AGFARMS_PRIVATE_KEY=${{ secrets.MAINNET_AGFARMS_PRIVATE_KEY }}

  build-and-push-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Sync Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.sync
        push: true
        tags: ${{ env.SYNC_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-push-api, build-and-push-sync]
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd /home/mattricks/derbyfish-flow
          git fetch origin
          git reset --hard origin/main

          export API_IMAGE_TAG=${{ github.sha }}
          export SYNC_IMAGE_TAG=${{ github.sha }}
          echo "Deploying API image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
          echo "Deploying Sync image: ${{ env.SYNC_IMAGE }}:${{ github.sha }}"

          # Update docker-compose.yml with the new image tags
          sed -i "s|image: .*derbyfish-flow:.*|image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}|g" docker-compose.yml
          sed -i "s|image: .*derbyfish-flow-sync:.*|image: ${{ env.SYNC_IMAGE }}:${{ github.sha }}|g" docker-compose.yml
          echo "Updated docker-compose.yml with image tags: ${{ github.sha }}"

          # Pull both images
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker pull ${{ env.SYNC_IMAGE }}:${{ github.sha }}

          # Stop existing services
          docker-compose -f docker-compose.yml down

          # Start services with new images
          docker-compose -f docker-compose.yml up -d --remove-orphans

          # Clean up unused images
          docker system prune -f

          # Show running containers
          docker-compose -f docker-compose.yml ps

